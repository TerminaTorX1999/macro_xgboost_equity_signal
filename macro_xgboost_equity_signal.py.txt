"""
Macro-Driven XGBoost Equity Directional Signal
Author: Aditya Das
Description:
Uses macroeconomic indicators and technical features to predict daily direction (up/down) of the S&P 500 using XGBoost classifier.
"""

import pandas as pd
import numpy as np
import yfinance as yf
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
import matplotlib.pyplot as plt

# ----------------------------
# 1. Download Equity Data
# ----------------------------
print("Downloading S&P 500 data...")
sp500 = yf.download("^GSPC", start="2000-01-01")
sp500['Return'] = sp500['Adj Close'].pct_change()
sp500['Direction'] = (sp500['Return'] > 0).astype(int)  # 1 = Up, 0 = Down

# ----------------------------
# 2. Download Macro Data
# ----------------------------
print("Downloading US macroeconomic data...")
# For simplicity, use some proxies like 10Y yield and CPI from Yahoo Finance:
yield_10y = yf.download("^TNX", start="2000-01-01")['Adj Close'] / 100
cpi = yf.download("CPIAUCSL", start="2000-01-01", progress=False)  # CPI data might not be available, can substitute or use static dataset

# Align data (fill missing macro data forward)
macro_df = pd.DataFrame({'10Y_Yield': yield_10y})
macro_df = macro_df.fillna(method='ffill')

# ----------------------------
# 3. Feature Engineering
# ----------------------------
df = sp500[['Adj Close', 'Return', 'Direction']].join(macro_df, how='inner')

# Technical indicators
df['EMA_10'] = df['Adj Close'].ewm(span=10).mean()
df['EMA_50'] = df['Adj Close'].ewm(span=50).mean()
df['EMA_diff'] = df['EMA_10'] - df['EMA_50']
df['RSI_14'] = 100 - (100 / (1 + df['Return'].rolling(14).apply(lambda x: (x[x > 0].sum() / abs(x[x < 0].sum() + 1e-9)))))
df = df.dropna()

# Define features and labels
features = ['10Y_Yield', 'EMA_diff', 'RSI_14']
X = df[features]
y = df['Direction']

# ----------------------------
# 4. Train-Test Split
# ----------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# ----------------------------
# 5. Train XGBoost Classifier
# ----------------------------
model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
model.fit(X_train, y_train)

# ----------------------------
# 6. Evaluate Model
# ----------------------------
y_pred = model.predict(X_test)
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print(f"Accuracy: {accuracy_score(y_test, y_pred):.2%}")

# ----------------------------
# 7. Feature Importance Plot
# ----------------------------
plt.bar(features, model.feature_importances_)
plt.title("Feature Importance in Macro XGBoost Model")
plt.show()